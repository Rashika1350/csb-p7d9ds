{"version":3,"sources":["components/todoItem.jsx","components/App.jsx","index.js"],"names":["Todoitem","props","React","createElement","onClick","onchecked","id","text","App","_useState","useState","_useState2","_slicedToArray","inputText","settext","_useState3","_useState4","items","setitems","deletechecked","prevItems","filter","item","index","className","onChange","event","newVal","target","value","type","concat","_toConsumableArray","map","key","ReactDOM","render","document","getElementById"],"mappings":"4MAmBeA,MAjBf,SAAkBC,GAOhB,OACEC,IAAAC,cAAA,MACEC,QAAS,WACPH,EAAMI,UAAUJ,EAAMK,MAGvBL,EAAMM,OCmCEC,MA/Cf,WACE,IAAAC,EAA6BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAlCI,EAASF,EAAA,GAAEG,EAAOH,EAAA,GACzBI,EAA0BL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA/BE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAWtB,SAASG,EAAcb,GACrBY,GAAS,SAACE,GACR,OAAOA,EAAUC,QAAO,SAACC,EAAMC,GAC7B,OAAOA,GAASjB,QAItB,OACEJ,IAAAC,cAAA,OAAKqB,UAAU,aACbtB,IAAAC,cAAA,OAAKqB,UAAU,WACbtB,IAAAC,cAAA,UAAI,eAEND,IAAAC,cAAA,OAAKqB,UAAU,QACbtB,IAAAC,cAAA,SAAOsB,SAvBb,SAAsBC,GACpB,IAAMC,EAASD,EAAME,OAAOC,MAC5Bf,EAAQa,IAqB2BG,KAAK,OAAOD,MAAOhB,IAClDX,IAAAC,cAAA,UAAQC,QApBd,WACEc,GAAS,SAACE,GACR,MAAM,GAANW,OAAAC,YAAWZ,GAAS,CAAEP,OAExBC,EAAQ,MAiBFZ,IAAAC,cAAA,YAAM,SAGVD,IAAAC,cAAA,WACED,IAAAC,cAAA,UACGc,EAAMgB,KAAI,SAACX,EAAMC,GAAK,OACrBrB,IAAAC,cAACH,EAAQ,CACPO,KAAMe,EACNjB,UAAWc,EACXe,IAAKX,EACLjB,GAAIiB,WCrClBY,IAASC,OAAOlC,IAAAC,cAACK,EAAG,MAAK6B,SAASC,eAAe,U","file":"static/js/main.5424b103.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nfunction Todoitem(props) {\r\n  //to show cut line\r\n  // const [isClicked, setClick] = useState(false);\r\n  // function handleClick(){\r\n  //     setClick(!isClicked);\r\n  // }\r\n  // style ={{textDecoration: isClicked?\"line-through\": \"none\"}\r\n  return (\r\n    <li\r\n      onClick={() => {\r\n        props.onchecked(props.id);\r\n      }}\r\n    >\r\n      {props.text}\r\n    </li>\r\n  );\r\n}\r\nexport default Todoitem;\r\n","import React, { useState } from \"react\";\nimport Todoitem from \"./todoItem\";\n\nfunction App() {\n  const [inputText, settext] = useState(\"\");\n  const [items, setitems] = useState([]);\n  function handleChange(event) {\n    const newVal = event.target.value;\n    settext(newVal);\n  }\n  function handleClick() {\n    setitems((prevItems) => {\n      return [...prevItems, inputText];\n    });\n    settext(\"\");\n  }\n  function deletechecked(id) {\n    setitems((prevItems) => {\n      return prevItems.filter((item, index) => {\n        return index != id;\n      });\n    });\n  }\n  return (\n    <div className=\"container\">\n      <div className=\"heading\">\n        <h1>To-Do List</h1>\n      </div>\n      <div className=\"form\">\n        <input onChange={handleChange} type=\"text\" value={inputText} />\n        <button onClick={handleClick}>\n          <span>Add</span>\n        </button>\n      </div>\n      <div>\n        <ul>\n          {items.map((item, index) => (\n            <Todoitem\n              text={item}\n              onchecked={deletechecked}\n              key={index}\n              id={index}\n            />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n//CHALLENGE: Make this app work by applying what you've learnt.\n//1. When new text is written into the input, its state should be saved.\n//2. When the add button is pressed, the current data in the input should be\n//added to an array.\n//3. The <ul> should display all the array items as <li>s\n"],"sourceRoot":""}